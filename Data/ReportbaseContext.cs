// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using accessVityzReports.Models;

#nullable disable

namespace accessVityzReports.Data
{
    public partial class ReportbaseContext : DbContext
    {
        public ReportbaseContext()
        {
        }

        public ReportbaseContext(DbContextOptions<ReportbaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Reports> Reports { get; set; }
        public virtual DbSet<UsersReports> UsersReports { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=sql-service;Initial Catalog=ReportBase;Persist Security Info=True;User ID=admin;Password=111111");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS");

            modelBuilder.Entity<Reports>(entity =>
            {
                entity.HasKey(e => e.RptId);

                entity.Property(e => e.RptId)
                    .ValueGeneratedNever()
                    .HasColumnName("rpt_ID");

                entity.Property(e => e.RptName)
                    .IsRequired()
                    .HasColumnName("rpt_Name");
            });

            modelBuilder.Entity<UsersReports>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.RptId).HasColumnName("rpt_ID");

                entity.Property(e => e.UsrLogin)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("usr_Login");

                entity.HasOne(d => d.Rpt)
                    .WithMany(p => p.UsersReports)
                    .HasForeignKey(d => d.RptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersReports_Reports");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}